{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/ai/flows/scenario-planning.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A scenario planning AI agent for generating personalized financial projections.\n *\n * - scenarioPlanning - A function that handles the scenario planning process.\n * - ScenarioPlanningInput - The input type for the scenarioPlanning function.\n * - ScenarioPlanningOutput - The return type for the scenarioPlanning function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ScenarioPlanningInputSchema = z.object({\n  financialData: z.string().describe('A consolidated string of the user\\'s financial data including assets, liabilities, net worth, credit score and EPF.'),\n  userGoals: z.string().describe('The user\\'s financial goals, e.g., retirement age, desired retirement income, target home price, etc.'),\n  query: z.string().describe('The user specified query relating to their financial future.'),\n  language: z.string().describe(\"The language for the response (e.g., 'English' or 'Telugu').\"),\n});\nexport type ScenarioPlanningInput = z.infer<typeof ScenarioPlanningInputSchema>;\n\nconst ScenarioPlanningOutputSchema = z.object({\n  projection: z.string().describe('A personalized financial projection based on the user\\'s data and goals.'),\n  explanation: z.string().describe('An explanation of the projection, including key assumptions and recommendations.'),\n});\nexport type ScenarioPlanningOutput = z.infer<typeof ScenarioPlanningOutputSchema>;\n\nexport async function scenarioPlanning(input: ScenarioPlanningInput): Promise<ScenarioPlanningOutput> {\n  return scenarioPlanningFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'scenarioPlanningPrompt',\n  input: {schema: ScenarioPlanningInputSchema},\n  output: {schema: ScenarioPlanningOutputSchema},\n  prompt: `You are **Personal Chanakya**, a strategic AI finance advisor built on Indian financial wisdom and powered by Gemini.\n\nYour primary goal is to generate a personalized financial projection and explain the key assumptions and recommendations based on the user's financial data and goals. You will use the user's financial data to simulate future scenarios.\n\n---\n\n### 🧠 Your Behavior:\n\n-   Be **conversational**, **wise**, and **strategic** like Chanakya.\n-   Focus on **clarity**, **actionable suggestions**, and **trust**.\n-   Don’t give generic advice — always use the user’s actual data.\n-   IMPORTANT: You MUST provide the entire response (projection and explanation) in the following language: {{{language}}}.\n\n---\n\n### 🧾 Input Data\n\nHere is the user's financial data in JSON format:\n{{{financialData}}}\n\nUser Goals:\n{{{userGoals}}}\n\nUser's Specific Question/Query:\n{{{query}}}\n\n---\n\nBased on this information, generate a projection and an explanation of how it was determined. Focus on answering the user's query with the projection.`,\n});\n\nconst scenarioPlanningFlow = ai.defineFlow(\n  {\n    name: 'scenarioPlanningFlow',\n    inputSchema: ScenarioPlanningInputSchema,\n    outputSchema: ScenarioPlanningOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IA2BsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/services/mcp-client.ts"],"sourcesContent":["const MCP_API_PROXY_URL = '/api/mcp';\n\ninterface McpResponse {\n    jsonrpc: string;\n    id: number;\n    result?: {\n        content: { type: string; text: string; }[];\n    };\n    error?: {\n        code: number;\n        message: string;\n        data: {\n            login_url: string;\n        }\n    }\n}\n\n\n\nexport class McpClient {\n    private sessionId: string;\n    private mcpUser: string | null; // Property to store the mcp-user (phone number)\n\n    constructor() {\n        if (typeof window !== \"undefined\") {\n            const storedSessionId = sessionStorage.getItem('mcp-session-id');\n            this.sessionId = storedSessionId || `mcp-session-${crypto.randomUUID()}`;\n            sessionStorage.setItem('mcp-session-id', this.sessionId);\n\n            // Retrieve mcp-user from sessionStorage\n            this.mcpUser = sessionStorage.getItem('mcp-user');\n            if (!this.mcpUser) {\n                 console.warn(\"mcp-user not found in sessionStorage. Please ensure it's set for mock data retrieval. It should be set after successful login on /mockWebPage.\");\n                 // In a real app, you'd likely force a redirect to login here if mcp-user is essential\n            } else {\n                console.log(\"mcp-user found in sessionStorage:\", this.mcpUser);\n            }\n        } else {\n            // For server-side rendering contexts (if applicable), generate a session ID\n            this.sessionId = `mcp-session-${crypto.randomUUID()}`;\n            this.mcpUser = null; // No window, so no mcp-user from sessionStorage\n        }\n    }\n\n    async callTool(toolName: string, args: Record<string, any> = {}): Promise<any> {\n        console.log(`Calling tool: ${toolName} with session: ${this.sessionId}`);\n\n        // Include mcpUser in the arguments sent to the backend\n        // This is crucial for your Go backend to find the phone number\n        const combinedArgs = { ...args, mcpUser: this.mcpUser };\n\n        try {\n            const response = await fetch(MCP_API_PROXY_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    mcpSessionId: this.sessionId,\n                    method: 'tools/call',\n                    params: {\n                        name: toolName,\n                        arguments: combinedArgs, // <--- Ensure this is `combinedArgs`\n                    },\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data: McpResponse = await response.json();\n\n            if (data.error) {\n                // Handle the case where the session is invalid and a login is required.\n                if (data.error.data?.login_url) {\n                    const loginUrl = `${data.error.data.login_url}&sessionId=${this.sessionId}`;\n                    console.warn(`MCP session invalid. Please log in: ${loginUrl}`);\n                    // In a real app, you would redirect the user to this URL\n                    // or open it in a popup.\n                    alert(`Your session has expired. Please log in by visiting this URL in a new tab:\\n\\n${loginUrl}\\n\\nAfter logging in, refresh this page.`);\n                    throw new Error(`Session expired. Please log in again.`);\n                }\n                throw new Error(`MCP Error: ${data.error.message}`);\n            }\n            \n            if (data.result && data.result.content[0]?.text) {\n                // The actual tool response is a JSON string within the 'text' field.\n                console.log(\"two conditions executed\");\n                console.log(JSON.parse(data.result.content[0].text));\n                return JSON.parse(data.result.content[0].text);\n            }\n            console.log(\"data : \", data.result);\n            return data.result;\n\n        } catch (error) {\n            console.error('Failed to call MCP tool:', error);\n            // This is a good place to add user-facing error handling.\n            // For now, we'll re-throw to be handled by the caller.\n            throw error;\n        }\n    }\n}"],"names":[],"mappings":";;;AAAA,MAAM,oBAAoB;AAmBnB,MAAM;IACD,UAAkB;IAClB,QAAuB;IAE/B,aAAc;QACV,wCAAmC;YAC/B,MAAM,kBAAkB,eAAe,OAAO,CAAC;YAC/C,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,YAAY,EAAE,OAAO,UAAU,IAAI;YACxE,eAAe,OAAO,CAAC,kBAAkB,IAAI,CAAC,SAAS;YAEvD,wCAAwC;YACxC,IAAI,CAAC,OAAO,GAAG,eAAe,OAAO,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACd,QAAQ,IAAI,CAAC;YACb,sFAAsF;YAC3F,OAAO;gBACH,QAAQ,GAAG,CAAC,qCAAqC,IAAI,CAAC,OAAO;YACjE;QACJ,OAAO;;QAIP;IACJ;IAEA,MAAM,SAAS,QAAgB,EAAE,OAA4B,CAAC,CAAC,EAAgB;QAC3E,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,SAAS,eAAe,EAAE,IAAI,CAAC,SAAS,EAAE;QAEvE,uDAAuD;QACvD,+DAA+D;QAC/D,MAAM,eAAe;YAAE,GAAG,IAAI;YAAE,SAAS,IAAI,CAAC,OAAO;QAAC;QAEtD,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,mBAAmB;gBAC5C,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACjB,cAAc,IAAI,CAAC,SAAS;oBAC5B,QAAQ;oBACR,QAAQ;wBACJ,MAAM;wBACN,WAAW;oBACf;gBACJ;YACJ;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;YAC5D;YAEA,MAAM,OAAoB,MAAM,SAAS,IAAI;YAE7C,IAAI,KAAK,KAAK,EAAE;gBACZ,wEAAwE;gBACxE,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE,WAAW;oBAC5B,MAAM,WAAW,GAAG,KAAK,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE;oBAC3E,QAAQ,IAAI,CAAC,CAAC,oCAAoC,EAAE,UAAU;oBAC9D,yDAAyD;oBACzD,yBAAyB;oBACzB,MAAM,CAAC,8EAA8E,EAAE,SAAS,wCAAwC,CAAC;oBACzI,MAAM,IAAI,MAAM,CAAC,qCAAqC,CAAC;gBAC3D;gBACA,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;YACtD;YAEA,IAAI,KAAK,MAAM,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM;gBAC7C,qEAAqE;gBACrE,QAAQ,GAAG,CAAC;gBACZ,QAAQ,GAAG,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI;gBAClD,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI;YACjD;YACA,QAAQ,GAAG,CAAC,WAAW,KAAK,MAAM;YAClC,OAAO,KAAK,MAAM;QAEtB,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,0DAA0D;YAC1D,uDAAuD;YACvD,MAAM;QACV;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/personal-chanakya/frontend/src/app/%28protected%29/scenario-planning/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\"; // Added for redirection\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Loader, Wand2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  scenarioPlanning,\n  type ScenarioPlanningOutput,\n} from \"@/ai/flows/scenario-planning\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { McpClient } from \"@/services/mcp-client\"; // Import McpClient\n// --- TYPE DEFINITIONS FOR FINANCIAL DATA ---\n// You should move these interfaces to a shared types file (e.g., @/types/financial.ts) if used elsewhere.\n\ninterface NetWorthData {\n  totalNetWorthValue: { units: number };\n  assetValues: { netWorthAttribute: string; value: { units: number } }[];\n  liabilityValues: { netWorthAttribute: string; value: { units: number } }[];\n  accountDetailsBulkResponse?: {\n    accountDetailsMap: {\n      [key: string]: {\n        accountDetails: {\n          fipMeta: { displayName: string };\n          accInstrumentType: string;\n          maskedAccountNumber: string;\n          depositSummary?: { currentBalance?: { units: number } };\n          equitySummary?: { currentValue?: { units: number } };\n        };\n      };\n    };\n  };\n}\n\ninterface BankTransactionsData {\n  txns: [number, string, string, number][];\n}\n\ninterface CreditReportData {\n  score?: { bureauScore?: number };\n  creditAccount?: {\n    creditAccountDetails?: {\n      subscriberName: string;\n      accountType: string;\n      currentBalance: number;\n      amountPastDue: number;\n    }[];\n  };\n}\n\ninterface EPFData {\n  overall_pf_balance?: { current_pf_balance?: number };\n  est_details?: { est_name: string; pf_balance: { net_balance: number } }[];\n}\n\ninterface FinancialDataForLLM {\n  netWorth: NetWorthData;\n  bankTransactions: BankTransactionsData[];\n  creditReport: CreditReportData;\n  epfDetails: EPFData;\n}\n\nconst formSchema = z.object({\n  userGoals: z\n    .string()\n    .min(10, { message: \"Please describe your goals in a bit more detail.\" }),\n  query: z\n    .string()\n    .min(10, { message: \"Please ask a specific question for the projection.\" }),\n});\n\nexport default function ScenarioPlanningPage() {\n  const [isLoadingForm, setIsLoadingForm] = useState(false); // Renamed to avoid clash\n  const [isLoadingData, setIsLoadingData] = useState(true); // New state for data loading\n  const [error, setError] = useState(\"\"); // New state for data fetching errors\n  const [financialData, setFinancialData] = useState<FinancialDataForLLM | null>(null);\n  const [result, setResult] = useState<ScenarioPlanningOutput | null>(null);\n  const [language, setLanguage] = useState(\"English\");\n  const { toast } = useToast();\n  const router = useRouter(); // Initialize useRouter\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      userGoals: \"\",\n      query: \"\",\n    },\n  });\n\n  // --- Data Fetching Logic (Copied and adapted from app/page.tsx) ---\n  useEffect(() => {\n    const user = sessionStorage.getItem(\"mcp-user\");\n    if (!user) {\n      router.push(\"/\"); // Redirect to login page if no user in session\n      return;\n    }\n\n    const fetchAndSetFinancialData = async () => {\n      setIsLoadingData(true);\n      setError(\"\");\n      try {\n        const mcpClient = new McpClient();\n\n        const [\n          netWorthRes,\n          bankTransactionsRes,\n          creditReportRes,\n          epfDetailsRes\n        ] = await Promise.all([\n          mcpClient.callTool('fetch_net_worth'),\n          mcpClient.callTool('fetch_bank_transactions'),\n          mcpClient.callTool('fetch_credit_report'),\n          mcpClient.callTool('fetch_epf_details'),\n        ]);\n\n        const structuredData: FinancialDataForLLM = {\n          netWorth: netWorthRes.netWorthResponse,\n          bankTransactions: bankTransactionsRes.bankTransactions,\n          creditReport: creditReportRes.creditReports[0].creditReportData,\n          epfDetails: epfDetailsRes.uanAccounts[0].rawDetails,\n        };\n\n        setFinancialData(structuredData);\n\n      } catch (err: any) {\n        console.error(\"Scenario Planning Data Fetch Error:\", err);\n        setError(err.message || \"An unknown error occurred while fetching your financial data.\");\n      } finally {\n        setIsLoadingData(false);\n      }\n    };\n\n    fetchAndSetFinancialData();\n  }, [router]); // Depend on router to ensure redirect logic works\n\n  // --- Helper to convert fetched data to string for LLM context ---\n  const getFinancialDataAsString = (): string => {\n    if (!financialData) {\n      return \"No financial data available.\";\n    }\n\n    let dataString = \"User Financial Portfolio:\\n\\n\";\n\n    // Net Worth Summary\n    dataString += \"### Net Worth ###\\n\";\n    dataString += `Total Net Worth: INR ${financialData.netWorth?.totalNetWorthValue?.units || 0}\\n`;\n    dataString += \"Assets:\\n\";\n    financialData.netWorth?.assetValues?.forEach(asset => {\n      dataString += `- ${asset.netWorthAttribute.replace(/_/g, ' ')}: INR ${asset.value.units}\\n`;\n    });\n    dataString += \"Liabilities:\\n\";\n    financialData.netWorth?.liabilityValues?.forEach(liability => {\n      dataString += `- ${liability.netWorthAttribute.replace(/_/g, ' ')}: INR ${liability.value.units}\\n`;\n    });\n    dataString += \"\\n\";\n\n    // Account Details\n    dataString += \"### Account Details ###\\n\";\n    if (financialData.netWorth?.accountDetailsBulkResponse?.accountDetailsMap) {\n        Object.values(financialData.netWorth.accountDetailsBulkResponse.accountDetailsMap).forEach(item => {\n            const acc = item.accountDetails;\n            const balance = acc.depositSummary?.currentBalance?.units || acc.equitySummary?.currentValue?.units || '0';\n            dataString += `- ${acc.fipMeta.displayName} (${acc.accInstrumentType.replace(/_/g, ' ')}, Masked: ${acc.maskedAccountNumber}): INR ${balance}\\n`;\n        });\n    } else {\n        dataString += \"No detailed account information available.\\n\";\n    }\n    dataString += \"\\n\";\n\n    // Bank Transactions (e.g., last 10)\n    dataString += \"### Recent Bank Transactions (Last 10) ###\\n\";\n    if (financialData.bankTransactions?.[0]?.txns?.length > 0) {\n        financialData.bankTransactions[0].txns.slice(0, 10).forEach(txn => {\n            dataString += `- Date: ${txn[2]}, Description: ${txn[1]}, Amount: ${txn[3] === 1 ? '+' : '-'} INR ${txn[0]}\\n`;\n        });\n    } else {\n        dataString += \"No recent bank transactions available.\\n\";\n    }\n    dataString += \"\\n\";\n\n    // Credit Report\n    dataString += \"### Credit Report ###\\n\";\n    dataString += `Credit Score (Experian): ${financialData.creditReport?.score?.bureauScore || 'N/A'}\\n`;\n    dataString += \"Loan & Credit Accounts:\\n\";\n    financialData.creditReport?.creditAccount?.creditAccountDetails?.forEach(acc => {\n        dataString += `- Lender: ${acc.subscriberName}, Type: ${acc.accountType}, Balance: INR ${acc.currentBalance}, Past Due: INR ${acc.amountPastDue}\\n`;\n    });\n    dataString += \"\\n\";\n\n    // EPF Details\n    dataString += \"### EPF Details ###\\n\";\n    dataString += `Overall PF Balance: INR ${financialData.epfDetails?.overall_pf_balance?.current_pf_balance || '0'}\\n`;\n    financialData.epfDetails?.est_details?.forEach(est => {\n        dataString += `- Establishment: ${est.est_name}, Balance: INR ${est.pf_balance.net_balance}\\n`;\n    });\n    dataString += \"\\n\";\n\n    return dataString;\n  };\n\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    if (!financialData) {\n      toast({\n        title: \"Error\",\n        description: \"Financial data is not yet loaded. Please wait.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoadingForm(true);\n    setResult(null);\n    try {\n      const response = await scenarioPlanning({\n        ...values,\n        financialData: getFinancialDataAsString(), // Use the actual fetched data\n        language: language,\n      });\n      setResult(response);\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate scenario. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoadingForm(false);\n    }\n  }\n\n  // --- Render Loading/Error States for Data Fetching ---\n  if (isLoadingData) {\n    return (\n      <main className=\"flex items-center justify-center min-h-screen bg-black text-white\">\n        <Loader className=\"mr-2 h-8 w-8 animate-spin\" />\n        <p>Fetching your financial data for scenario planning...</p>\n      </main>\n    );\n  }\n\n  if (error || !financialData) {\n    return (\n      <main className=\"flex flex-col items-center justify-center min-h-screen bg-black text-white\">\n        <div className=\"bg-red-900/20 border border-red-500/50 p-6 rounded-lg text-center\">\n          <h2 className=\"text-xl font-bold text-red-400 mb-2\">Failed to Load Financial Data</h2>\n          <p className=\"text-red-300 mb-4\">{error}</p>\n          <Button variant=\"secondary\" onClick={() => window.location.reload()}>Try Again</Button>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Plan Your Financial Future</CardTitle>\n            <CardDescription>\n              Describe your goals to generate a projection in your chosen\n              language.\n            </CardDescription>\n          </div>\n          <Tabs\n            defaultValue=\"English\"\n            onValueChange={setLanguage}\n            className=\"w-auto\"\n          >\n            <TabsList>\n              <TabsTrigger value=\"English\">English</TabsTrigger>\n              <TabsTrigger value=\"Telugu\">తెలుగు</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              <FormField\n                control={form.control}\n                name=\"userGoals\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Your Financial Goals</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"e.g., I want to retire at 60 with a monthly income of ₹1L, and buy a house worth ₹1 Cr in 5 years.\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"query\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Your Specific Question</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Can I afford a ₹50L home loan right now?\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={isLoadingForm || isLoadingData}>\n                {isLoadingForm ? (\n                  <Loader className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  <Wand2 className=\"mr-2 h-4 w-4\" />\n                )}\n                Generate Projection\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {result && (\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Financial Projection</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-sm max-w-none text-card-foreground\">\n              {result.projection\n                .split(\"\\n\")\n                .map((line, i) => <p key={i}>{line}</p>)}\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>Explanation & Assumptions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-sm max-w-none text-card-foreground\">\n              {result.explanation\n                .split(\"\\n\")\n                .map((line, i) => <p key={i}>{line}</p>)}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}